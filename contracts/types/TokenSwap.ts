/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TokenSwapInterface extends utils.Interface {
  functions: {
    "gbrToken()": FunctionFragment;
    "getGBRTokenBalance()": FunctionFragment;
    "owner()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "swap(uint256)": FunctionFragment;
    "usdtToken()": FunctionFragment;
    "withdrawTokens(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "gbrToken"
      | "getGBRTokenBalance"
      | "owner"
      | "setOwner"
      | "swap"
      | "usdtToken"
      | "withdrawTokens"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "gbrToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getGBRTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "swap", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "usdtToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "gbrToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGBRTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdtToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {
    "Swap(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
}

export interface SwapEventObject {
  user: string;
  amount: BigNumber;
}
export type SwapEvent = TypedEvent<[string, BigNumber], SwapEventObject>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface TokenSwap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenSwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    gbrToken(overrides?: CallOverrides): Promise<[string]>;

    getGBRTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    usdtToken(overrides?: CallOverrides): Promise<[string]>;

    withdrawTokens(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  gbrToken(overrides?: CallOverrides): Promise<string>;

  getGBRTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  setOwner(
    _newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swap(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  usdtToken(overrides?: CallOverrides): Promise<string>;

  withdrawTokens(
    _tokenAddress: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    gbrToken(overrides?: CallOverrides): Promise<string>;

    getGBRTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    setOwner(_newOwner: string, overrides?: CallOverrides): Promise<void>;

    swap(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    usdtToken(overrides?: CallOverrides): Promise<string>;

    withdrawTokens(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Swap(address,uint256)"(
      user?: string | null,
      amount?: null
    ): SwapEventFilter;
    Swap(user?: string | null, amount?: null): SwapEventFilter;
  };

  estimateGas: {
    gbrToken(overrides?: CallOverrides): Promise<BigNumber>;

    getGBRTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    usdtToken(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawTokens(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    gbrToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGBRTokenBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    usdtToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawTokens(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
